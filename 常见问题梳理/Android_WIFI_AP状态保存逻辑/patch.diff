From 425e8d0e294af30a1c5220d4ae50e5672fdb2774 Mon Sep 17 00:00:00 2001
From: taodong <taodong@cvte.com>
Date: Wed, 06 Jan 2021 19:51:20 +0800
Subject: [PATCH] [feature][JIRA#SMARTPDT-5764][WiFi@ATBM60X2][common]add str wifi/softap restore function

[what]add str wifi/softap restore function
[why]add str wifi/softap restore function
[how]add str wifi/softap restore function

Change-Id: I4ac0a15911da57ab1f13cdca9cea400c20c1e28a
---

diff --git a/base/core/java/android/provider/Settings.java b/base/core/java/android/provider/Settings.java
old mode 100644
new mode 100755
index f68cf83..dfc4f4a
--- a/base/core/java/android/provider/Settings.java
+++ b/base/core/java/android/provider/Settings.java
@@ -4582,6 +4582,10 @@
         @Deprecated
         public static final String WIFI_ON = Global.WIFI_ON;
 
+        //CVTE ADD for persist SoftAP state, add database to persist SoftAP state
+        public static final String WIFIAP_ON = Global.WIFIAP_ON;
+        //CVTE END
+
         /**
          * @deprecated Use
          * {@link android.provider.Settings.Secure#WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE}
@@ -4782,6 +4786,9 @@
             MOVED_TO_GLOBAL.add(Settings.Global.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY);
             MOVED_TO_GLOBAL.add(Settings.Global.WIFI_NUM_OPEN_NETWORKS_KEPT);
             MOVED_TO_GLOBAL.add(Settings.Global.WIFI_ON);
+            //CVTE ADD for persist SoftAP state, add database to persist SoftAP state
+            MOVED_TO_GLOBAL.add(Settings.Global.WIFIAP_ON);
+            //CVTE END
             MOVED_TO_GLOBAL.add(Settings.Global.WIFI_P2P_DEVICE_NAME);
             MOVED_TO_GLOBAL.add(Settings.Global.WIFI_SAVED_STATE);
             MOVED_TO_GLOBAL.add(Settings.Global.WIFI_SUPPLICANT_SCAN_INTERVAL_MS);
@@ -9634,6 +9641,10 @@
        public static final String WIFI_SCAN_ALWAYS_AVAILABLE =
                 "wifi_scan_always_enabled";
 
+       //CVTE ADD for persist SoftAP state, add database to persist SoftAP state
+       public static final String WIFIAP_ON = "wifiap_on";
+       //CVTE END
+
         /**
          * The interval in milliseconds at which wifi rtt ranging requests will be throttled when
          * they are coming from the background.
diff --git a/base/packages/SettingsProvider/res/values/defaults.xml b/base/packages/SettingsProvider/res/values/defaults.xml
index e1a602b..46bb45e 100644
--- a/base/packages/SettingsProvider/res/values/defaults.xml
+++ b/base/packages/SettingsProvider/res/values/defaults.xml
@@ -49,6 +49,9 @@
     <bool name="def_netstats_enabled">true</bool>
     <bool name="def_usb_mass_storage_enabled">true</bool>
     <bool name="def_wifi_on">false</bool>
+    <!-- CVTE ADD for persist SoftAP state, add database to persist SoftAP state -->
+    <bool name="def_wifiap_on">false</bool>
+    <!-- CVTE END -->
     <!-- 0 == never, 1 == only when plugged in, 2 == always -->
     <integer name="def_wifi_sleep_policy">2</integer>
     <bool name="def_wifi_wakeup_enabled">true</bool>
diff --git a/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
index e853399..4f3d8d7 100644
--- a/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
+++ b/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
@@ -2508,6 +2508,11 @@
             loadBooleanSetting(stmt, Settings.Global.WIFI_ON,
                     R.bool.def_wifi_on);
 
+            //CVTE ADD for persist SoftAP state, add database to persist SoftAP state
+            loadBooleanSetting(stmt, Settings.Global.WIFIAP_ON,
+                    R.bool.def_wifiap_on);
+            //CVTE END
+
             loadBooleanSetting(stmt, Settings.Global.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,
                     R.bool.def_networks_available_notification_on);
 
diff --git a/base/services/core/java/com/android/server/power/PowerManagerService.java b/base/services/core/java/com/android/server/power/PowerManagerService.java
index 559dcad..e3d5205 100644
--- a/base/services/core/java/com/android/server/power/PowerManagerService.java
+++ b/base/services/core/java/com/android/server/power/PowerManagerService.java
@@ -100,6 +100,9 @@
 import com.android.server.power.batterysaver.BatterySaverController;
 import com.android.server.power.batterysaver.BatterySaverStateMachine;
 import com.android.server.power.batterysaver.BatterySavingStats;
+//CVTE ADD for str start device restore wifi.
+import com.android.server.power.SuspendThread;
+//CVET END
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -4389,6 +4392,9 @@
             } finally {
                 Binder.restoreCallingIdentity(ident);
             }
+            //CVTE ADD for str start device restore wifi.
+            SuspendThread.suspend(mContext, false);
+            //CVTE END
         }
 
         @Override // Binder call
@@ -4402,6 +4408,9 @@
 
             final int uid = Binder.getCallingUid();
             final long ident = Binder.clearCallingIdentity();
+            //CVTE ADD for str close device wifi.
+            SuspendThread.suspend(mContext, true);
+            //CVTE END
             try {
                 goToSleepInternal(eventTime, reason, flags, uid);
             } finally {
diff --git a/base/services/core/java/com/android/server/power/SuspendThread.java b/base/services/core/java/com/android/server/power/SuspendThread.java
new file mode 100755
index 0000000..aa883bd
--- /dev/null
+++ b/base/services/core/java/com/android/server/power/SuspendThread.java
@@ -0,0 +1,302 @@
+/**add WiFi and hotspot open logic at str switch
+*@autho bsp team.
+*@version 1.0.
+*@data 2019/12/05.
+*/
+
+package com.android.server.power;
+
+import android.content.ContentResolver;
+import android.provider.Settings;
+import android.annotation.SuppressLint;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.net.wifi.WifiManager;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.os.UserHandle;
+import android.os.PowerManager;
+import android.util.Log;
+import android.net.ConnectivityManager;
+import android.os.SystemProperties;
+
+public final class SuspendThread extends Thread {
+    private static final String TAG = "SuspendThread";
+
+    private static final Object state = new Object();
+    private static final int MSG_START = 0;
+    private static final int MSG_DONE = 1;
+    private static final int MSG_DELAY = 100;
+
+    //for atbm6022 chip init when system in Lan mode
+    private static final String WIFI_CHIP_INIT_PROP = "sys.wifi_chip_init";
+
+    private static boolean sIsStarted = false;
+    private static boolean isLastDown = false;
+    private static boolean mSuspendDown = false;
+    private static int mActionDone = 0;
+    private static boolean isWifiDisabling = false;
+    private static boolean isWifiApDisabling = false;
+
+    private static Context mContext = null;
+    private static PowerManager.WakeLock mWakeLock = null;
+
+    private static boolean isWifiNeedOn = false;
+    private static boolean isWifiApNeedOn = false;
+
+    private static final Handler mHandler  = new Handler(Looper.getMainLooper()){
+        @Override
+        public void dispatchMessage(Message msg) {
+            super.dispatchMessage(msg);
+            switch (msg.what) {
+                case MSG_START:{
+                    Log.e(TAG, "mHandler dispatchMessage MSG_START.");
+                    actionStart();
+                    break;
+                }
+                case MSG_DONE: {
+                    Log.e(TAG, "mHandler dispatchMessage MSG_DONE.");
+                    actionDone();
+                    break;
+                }
+                default:
+                    break;
+            }
+        }
+    };
+
+    private static final BroadcastReceiver wifireceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (WifiManager.WIFI_STATE_CHANGED_ACTION.equals(intent.getAction())) {
+                //WiFi state [disabling,disabled,enabling,enabled,unknown] value is [0,1,2,3,4]
+                int wifiState = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, WifiManager.WIFI_STATE_UNKNOWN);
+                Log.d(TAG,"wifi state change and state = " + wifiState);
+                switch (wifiState) {
+                    case WifiManager.WIFI_STATE_DISABLED:{
+                        if (mSuspendDown  && isWifiDisabling) {
+                            isWifiDisabling = false;
+                            Log.d("wifi", "unregisterReceiver when WiFi disabled");
+                            mContext.unregisterReceiver(wifireceiver);
+                            mHandler.sendEmptyMessage(MSG_DONE);
+                        }
+                        break;
+                    }
+                    case WifiManager.WIFI_STATE_DISABLING:{
+                        isWifiDisabling = true;
+                        break;
+                    }
+                    case WifiManager.WIFI_STATE_ENABLED :{
+                        if (!mSuspendDown) {
+                            Log.d("wifi", "unregisterReceiver when WiFi enabled");
+                            isWifiNeedOn = false;
+                            mContext.unregisterReceiver(wifireceiver);
+                            mHandler.sendEmptyMessageDelayed(MSG_DONE, MSG_DELAY);
+                        }
+                        break;
+                    }
+                    case WifiManager.WIFI_STATE_ENABLING:{
+                        break;
+                    }
+                    case WifiManager.WIFI_STATE_UNKNOWN:{
+                        break;
+                    }
+                }
+            } else if (WifiManager.WIFI_AP_STATE_CHANGED_ACTION.equals(intent.getAction())) {
+                //WiFi AP state [disabling,disabled,enabling,enabled,failed] value is [10,11,12,13,14]
+                int wifiApState = intent.getIntExtra(WifiManager.EXTRA_WIFI_AP_STATE, WifiManager.WIFI_AP_STATE_FAILED);
+                Log.d(TAG,"wifi Ap state change and state = " + wifiApState);
+                switch (wifiApState) {
+                    case WifiManager.WIFI_AP_STATE_DISABLED:{
+                        if (mSuspendDown && isWifiApDisabling) {
+                            isWifiApDisabling = false;
+                            Log.d("wifi", "unregisterReceiver when WiFiAp disabled");
+                            mContext.unregisterReceiver(wifireceiver);
+                            mHandler.sendEmptyMessage(MSG_DONE);
+                        }
+                        break;
+                    }
+                    case WifiManager.WIFI_AP_STATE_DISABLING:{
+                        isWifiApDisabling = true;
+                        break;
+                    }
+                    case WifiManager.WIFI_AP_STATE_ENABLED :{
+                        if (!mSuspendDown) {
+                            Log.d("wifi", "unregisterReceiver when WiFiAp enabled");
+                            isWifiApNeedOn = false;
+                            mContext.unregisterReceiver(wifireceiver);
+                            mHandler.sendEmptyMessageDelayed(MSG_DONE, MSG_DELAY);
+                        }
+                        break;
+                    }
+                    case WifiManager.WIFI_AP_STATE_ENABLING:{
+                        break;
+                    }
+                    case WifiManager.WIFI_AP_STATE_FAILED:{
+                        break;
+                    }
+                }
+            }
+        }
+    };
+
+    private SuspendThread(Runnable suspendRunnable, boolean down) {
+        super(suspendRunnable);
+        mSuspendDown = down;
+    }
+
+    // ensure that only one thread is trying to suspend.
+    // any additional calls are just returned
+    @SuppressLint({"InvalidWakeLockTag", "HandlerLeak"})
+    public static void suspend(Context context, boolean down) {
+        synchronized (state) {
+            ContentResolver cr = context.getContentResolver();
+            boolean wifiStatus = Settings.Global.getInt(cr, Settings.Global.WIFI_ON, 0) == 0;
+            boolean wifiApStatus = Settings.Global.getInt(cr, Settings.Global.WIFIAP_ON, 0) == 0;
+            if(wifiStatus && wifiApStatus && !isWifiNeedOn && !isWifiApNeedOn){
+                Log.d(TAG,"Both WiFi and ap are off.");
+                if(!down) {
+                    Log.d(TAG, "cvt init WifiChip in Str Resume for atbm6022.");
+                    SystemProperties.set(WIFI_CHIP_INIT_PROP, "1");
+                }
+                return;
+            }
+
+            if (sIsStarted || down == isLastDown) {
+                Log.d(TAG, "sIsStarted : " + sIsStarted + " isLastDown : " + isLastDown + " down : " + down + " isWifiNeedOn : " + isWifiNeedOn);
+                if(!wifiStatus) {
+                    isWifiNeedOn = true;
+                }
+                Log.d(TAG,"Request to suspend already running, returning and isWifiNeedOn = " + isWifiNeedOn);
+                return;
+            }
+            isLastDown = down;
+            sIsStarted = true;
+            SuspendThread sInstance = new SuspendThread(SuspendRunnable, down);
+            if (mContext == null) {
+                mContext = context;
+            }
+
+            if (mWakeLock == null) {
+                try {
+                    PowerManager mPowerManager = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
+                    mWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
+                    mWakeLock.setReferenceCounted(false);
+                } catch (SecurityException e) {
+                    Log.w(TAG, "No permission to acquire wake lock", e);
+                    mWakeLock = null;
+                }
+            }
+
+            // make sure all the work can be done.
+            if (down && mWakeLock != null && !mWakeLock.isHeld()) {
+                mWakeLock.acquire(10 * 1000L /*10 s*/);
+            }
+            mActionDone = 0;
+            mHandler.sendEmptyMessage(MSG_START);
+            sInstance.start();
+        }
+    }
+
+    private static void actionStart() {
+        synchronized (state) {
+            mActionDone++;
+        }
+    }
+
+    private static void actionDone() {
+        synchronized (state) {
+            mActionDone--;
+            if (mActionDone <= 0 && mWakeLock.isHeld()) {
+                Log.d(TAG, "mWakeLock.release().");
+                mWakeLock.release();
+            }
+        }
+    }
+
+    private static Runnable SuspendRunnable = new Runnable() {
+        @Override
+        public void run() {
+            Log.e(TAG, " run() mSuspendDown = " + mSuspendDown);
+            if (mSuspendDown) {
+                setWifiOrWifiApOffIfNeed();
+
+            } else {
+                setWifiOrWifiApOnIfNeed();;
+            }
+            Log.e(TAG,"SuspendRunnable MSG_DONE MSG_DELAY");
+            mHandler.sendEmptyMessage(MSG_DONE);
+            sIsStarted = false;
+        }
+
+        private void setWifiOrWifiApOffIfNeed() {
+            WifiManager wifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);
+
+            if (wifiManager.isWifiEnabled() || isWifiNeedOn) {
+                Log.d(TAG, "setWifiOff()");
+                isWifiNeedOn = true;
+                registerWifiBroadcast();
+                mHandler.sendEmptyMessage(MSG_START);
+                wifiManager.setWifiEnabled(false);
+                ContentResolver cr = mContext.getContentResolver();
+                Settings.Global.putInt(cr, Settings.Global.WIFI_ON, 1);
+
+            } else if (wifiManager.isWifiApEnabled() || isWifiApNeedOn) {
+                Log.d(TAG, "setWifiApOff()");
+                isWifiApNeedOn = true;
+                registerWifiBroadcast();
+                mHandler.sendEmptyMessage(MSG_START);
+                ConnectivityManager mConnectivityManager = (ConnectivityManager) mContext.
+                        getSystemService(Context.CONNECTIVITY_SERVICE);
+                mConnectivityManager.stopTethering(ConnectivityManager.TETHERING_WIFI);
+                ContentResolver cr = mContext.getContentResolver();
+                Settings.Global.putInt(cr, Settings.Global.WIFIAP_ON, 1);
+            }
+        }
+
+        private void registerWifiBroadcast() {
+            Intent wifiIntent = new Intent(WifiManager.WIFI_STATE_CHANGED_ACTION);
+            Intent wifiApIntent = new Intent(WifiManager.WIFI_STATE_CHANGED_ACTION);
+            mContext.removeStickyBroadcastAsUser(wifiIntent, UserHandle.ALL);
+            mContext.removeStickyBroadcastAsUser(wifiApIntent, UserHandle.ALL);
+            IntentFilter filter = new IntentFilter();
+            filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
+            filter.addAction(WifiManager.WIFI_AP_STATE_CHANGED_ACTION);
+            mContext.registerReceiver(wifireceiver, filter);
+        }
+
+        private void setWifiOrWifiApOnIfNeed() {
+            WifiManager wifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);
+            Log.d(TAG, "setWifiOrWifiApOnIfNeed isWifiNeedOn : " + isWifiNeedOn +
+                    " isWifiApNeedOn : " + isWifiApNeedOn);
+            if (isWifiNeedOn) {
+                registerWifiBroadcast();
+                try{
+                    Thread.currentThread().sleep(500);
+                }catch(Exception e){
+                    Log.e(TAG,"delay failed e = " + e);
+                }
+                wifiManager.setWifiEnabled(true);
+            } else if (isWifiApNeedOn) {
+                registerWifiBroadcast();
+                ConnectivityManager mConnectivityManager = (ConnectivityManager) mContext.
+                        getSystemService(Context.CONNECTIVITY_SERVICE);
+                mConnectivityManager.startTethering(ConnectivityManager.TETHERING_WIFI, false,
+                    new ConnectivityManager.OnStartTetheringCallback(){
+                    @Override
+                    public void onTetheringStarted () {
+                        Log.d(TAG, "setWifiApOn successed");
+                    }
+                    @Override
+                    public void onTetheringFailed () {
+                        Log.d(TAG, "setWifiApOn failed");
+                    }
+                },new Handler(Looper.getMainLooper()));
+            }
+        }
+    };
+}
+
diff --git a/opt/net/wifi/service/java/com/android/server/wifi/WifiServiceImpl.java b/opt/net/wifi/service/java/com/android/server/wifi/WifiServiceImpl.java
old mode 100644
new mode 100755
index a0bbded..bc66931
--- a/opt/net/wifi/service/java/com/android/server/wifi/WifiServiceImpl.java
+++ b/opt/net/wifi/service/java/com/android/server/wifi/WifiServiceImpl.java
@@ -514,6 +514,11 @@
         Slog.i(TAG, "WifiService starting up with Wi-Fi " +
                 (wifiEnabled ? "enabled" : "disabled"));
 
+        //CVTE ADD for resolution str test and shut down, system startup WiFi is not turned on.
+        if(!wifiEnabled) {
+            wifiEnabled = mSettingsStore.getPersistedWifiState() == 1;
+        }
+        //CVTE END
         registerForScanModeChange();
         mContext.registerReceiver(
                 new BroadcastReceiver() {
@@ -599,6 +604,23 @@
         mWifiStateMachine.handleUserStop(userId);
     }
 
+    //CVTE ADD for persist SoftAP state, add database to persist SoftAP state
+    public void checkAndStartWifiAp() {
+        /* Check if wifi-ap needs to be enabled */
+        boolean wifiApEnabled = mSettingsStore.getPersistedWifiApState() == 1;
+        Slog.i(TAG, "WifiService starting up with WiFi-AP " +
+                (wifiApEnabled ? "enabled" : "disabled"));
+
+        if (mSettingsStore.isWifiToggleEnabled()) {
+            Slog.i(TAG, "WiFi is enabled , clear WIFIAP_ON state");
+            mSettingsStore.persistWifiApState(0);
+        }
+        if (mSettingsStore.getPersistedWifiApState() != 1)
+            return;
+        startSoftAp(null);
+    }
+    //CVTE END
+
     /**
      * See {@link android.net.wifi.WifiManager#startScan}
      *
@@ -866,6 +888,11 @@
             }
         }
 
+        //CVTE ADD for persist SoftAP state, add database to persist SoftAP state
+        if(enable) {
+            mSettingsStore.persistWifiApState(0);
+        }
+        //CVTE END
         mWifiController.sendMessage(CMD_WIFI_TOGGLED);
         return true;
     }
@@ -1025,6 +1052,15 @@
         mLog.trace("startSoftApInternal uid=% mode=%")
                 .c(Binder.getCallingUid()).c(mode).flush();
 
+        //CVTE ADD for persist SoftAP state, add database to persist SoftAP state
+        long ident = Binder.clearCallingIdentity();
+        try {
+            mSettingsStore.persistWifiApState(1);
+        } finally {
+            Binder.restoreCallingIdentity(ident);
+        }
+        //CVTE END
+
         // null wifiConfig is a meaningful input for CMD_SET_AP
         if (wifiConfig == null || WifiApConfigStore.validateApWifiConfiguration(wifiConfig)) {
             SoftApModeConfiguration softApConfig = new SoftApModeConfiguration(mode, wifiConfig);
@@ -1068,6 +1104,9 @@
      */
     private boolean stopSoftApInternal() {
         mLog.trace("stopSoftApInternal uid=%").c(Binder.getCallingUid()).flush();
+        //CVTE ADD for persist SoftAP state, add database to persist SoftAP state
+        mSettingsStore.persistWifiApState(0);
+        //CVTE END
 
         mWifiController.sendMessage(CMD_SET_AP, 0, 0);
         return true;
diff --git a/opt/net/wifi/service/java/com/android/server/wifi/WifiSettingsStore.java b/opt/net/wifi/service/java/com/android/server/wifi/WifiSettingsStore.java
old mode 100644
new mode 100755
index 40ae05c..c675fe6
--- a/opt/net/wifi/service/java/com/android/server/wifi/WifiSettingsStore.java
+++ b/opt/net/wifi/service/java/com/android/server/wifi/WifiSettingsStore.java
@@ -139,6 +139,24 @@
         Settings.Global.putInt(cr, Settings.Global.WIFI_ON, state);
     }
 
+    //CVTE ADD for persist SoftAP state, add database to persist SoftAP state
+    public void persistWifiApState(int state) {
+        final ContentResolver cr = mContext.getContentResolver();
+        Settings.Global.putInt(cr, Settings.Global.WIFIAP_ON, state);
+    }
+
+    public int getPersistedWifiApState() {
+        final ContentResolver cr = mContext.getContentResolver();
+        try {
+            return Settings.Global.getInt(cr, Settings.Global.WIFIAP_ON);
+        } catch (Settings.SettingNotFoundException e) {
+            Settings.Global.putInt(cr, Settings.Global.WIFIAP_ON, WIFI_DISABLED);
+            return WIFI_DISABLED;
+        }
+    }
+    //CVTE END
+
+
     /* Does Wi-Fi need to be disabled when airplane mode is on ? */
     private boolean isAirplaneSensitive() {
         String airplaneModeRadios = Settings.Global.getString(mContext.getContentResolver(),
@@ -204,7 +222,9 @@
         }
     }
 
-    private int getPersistedWifiState() {
+    //CVTE MODIFY for resolution str test and shut down, system startup WiFi is not turned on.
+    public int getPersistedWifiState() {
+    //CVET END
         final ContentResolver cr = mContext.getContentResolver();
         try {
             return Settings.Global.getInt(cr, Settings.Global.WIFI_ON);
